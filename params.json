{
  "name": "jQueryAnnex",
  "tagline": "Lots and lots of nice to have jQuery-additions and everyday helpers. And validation as well!",
  "body": "jQuery Annex\r\n============\r\n\r\n\r\nWritten by:  Sebastian Schlapkohl  \r\neMail:       jqueryannex@ifschleife.de  \r\nSites: [project](http://www.ifschleife.de/jqueryannex), [github](https://github.com/OktarinTentakel/jqueryannex), [ifschleife](http://www.ifschleife.de)\r\n\r\n\r\n\r\nWhat is this?\r\n-------------\r\nAnnex is a jQuery-core-expanding collection of \"nice to have\" methods you'll need more often than not. The basic idea was (and is) to streamline most vanilla-js leftovers every javascript dev still has to deal with (like timeouts) and provide methods for those things as well as the stuff everyone searches for in jQuery at least once, but which aren't there (yet).\r\n\r\nAn example? Load a stylesheet the same way you'd load a script with getScript().\r\n\r\nAnother example? Flexible, centrally disablable console logging with check if the console is available.\r\n\r\nSome more? Polling. A real isNaN. Pythonic string formatting. Precise long running timers. Method throttling. History manipulation. Image preloading. Webfont display callback. And so on and so forth ...\r\n\r\nGenerally speaking: everytime i need some general missing functionality, semantically fitting with the jQuery core, I implement a generic solution. If something gets absorbed by the core it will be removed.\r\n\r\nAnnex should always fit the current jQuery version. Changes may be breaking but are documented in the commits. The fitting jQuery version is always included in the uncompressed file's header doc.\r\n\r\n\r\n\r\nHow do I include and use this?\r\n------------------------------\r\nEasy as pie. Just include it after jQuery and you're good to go.\r\n\r\n```\r\n<script src=\"jquery-x.xx.x.min.js\"></script>\r\n<script src=\"jquery.annex.min.js\"></script>\r\n```\r\n\r\nIf you need some pointers about the possibilities, have a look at the [examples](http://ifschleife.de/jqueryannex/?examples) on the project site.\r\n\r\n\r\n\r\nAnd if I want to load this as a module?\r\n---------------------------------------\r\nSame as for jQuery itself. Shim it, define the export as $ and set jQuery as a dependency.\r\n\r\n\r\n\r\nIs this any good, why should I use this?\r\n----------------------------------------\r\nEverytime I have to do a one pager or smaller project without this helper lib I'm frustrated about the fact, that I, again, have to deal with all those already solved problems and bloat by code with those typical, ugly javascript weirdnesses.\r\n\r\nThis just lets you streamline everyday jQuery code and make things generally more friendly, for the price of 25kb.\r\n\r\nIn bigger projects, I'd recommend a solid framework like angular or backbone and maybe add underscore, here jQuery, if used at all, is mostly included for it's selector engine. So a jQuery addition seems a little pointless.\r\n\r\nSo in summary: Annex is a good addition for small to medium projects with a heavy focus on jQuery.\r\n\r\n\r\n\r\nWhat's this validation plugin stuff?\r\n------------------------------------\r\nA while ago I wrote [HtmlForm](https://github.com/OktarinTentakel/htmlform), which is a form definition framework for PHP5. One result of this project was complex javascript form validation. When I moved away from server-side code to the client I suddenly needed form validation without the PHP context and decided to move the javascript validation part into an Annex-plugin.\r\n\r\nThis little piece of code is the result.\r\n\r\nYou can do quite advanced stuff with this plugin and I already used this for quite complex, bigger projects with knockout for example, but the API is still a little strange and convoluted for my taste, which is a result of the original validation structure of HtmlForm.\r\n\r\nNonetheless, this is quite mighty and the example implementation in `plugin-validation-example` will give you a good idea about the general workings.\r\n\r\nBy the way: this is a **form** validator, not an **object** or **schema** validator. If you don't have an actual form to validate, do yourself a favour and use [SchemaInspector](https://github.com/Atinux/schema-inspector).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}