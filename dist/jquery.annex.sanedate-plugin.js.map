{"version":3,"file":"jquery.annex.sanedate-plugin.js","sources":["jquery.annex.sanedate-plugin.js"],"sourcesContent":["/**\n * jQueryAnnex - SaneDate Plugin\n * This plugin is the attempt to make JS date objects more sane and thereby usable.\n * The Date object is one of the most badly designed parts of the JS core with so many quirks, inconsistencies and traps to fall into\n * as a developer, that I took it upon me to implement a small framework to deal with dates and timestamps in a less headachy way.\n *\n * Think as this as a python inspired little brother of moment.js.\n *\n * The core of this plugin is the SaneDate class, wrapping a vanilla Date object. See class and function definitions for further documentation\n * and have a look at /test/core/dates.js for more usage examples.\n *\n * This plugin automatically gets unit-tested via Ava ob build (tests are in /test/core/dates.js).\n *\n * @author Sebastian Schlapkohl <jqueryannex@ifschleife.de>\n * @version Revision 46 developed and tested with jQuery 3.6.1, 2.2.4 and 1.12.4\n **/\n\n\n\n// automatically determine if annex should be loaded traditionally, as an AMD-module or via commonjs, if included before anything that\n// exposes \"define\" (require.js e.g.), it will load normally, extending jQuery directly and globally\n// if loaded as AMD-module it expects Annex to be available as \"jqueryannex\"\n(function(global, factory){\n\tvar jQuery = global.jQuery || global.$;\n\n\tif( (typeof define === 'function') && define.amd ){\n\t\tdefine(['jqueryannex'], factory);\n\t} else if( (typeof module === 'object') && module.exports ){\n\t\tif( !global.__AVA_ENV__ ){\n\t\t\ttry {\n\t\t\t\tif( !jQuery ){\n\t\t\t\t\tjQuery = require('jquery');\n\t\t\t\t}\n\n\t\t\t\tif( !jQuery.jqueryAnnexData ){\n\t\t\t\t\tjQuery = require('jqueryannex');\n\t\t\t\t}\n\t\t\t} catch(ex){}\n\t\t}\n\n\t\tmodule.exports = jQuery\n\t\t\t? factory(jQuery)\n\t\t\t: function(jQuery){\n\t\t\t\treturn factory(jQuery);\n\t\t\t}\n\t\t;\n\t} else {\n\t\tfactory(jQuery);\n\t}\n}((typeof window !== 'undefined') ? window : this, function($){\n\n\t//--|CHECK-AND-PREPARE-JQUERY----------\n\n\t(function(){\n\t\tif( !$ || !$.fn || !$().jquery ){\n\t\t\tthrow 'jQueryAnnex SaneDate Plugin | cannot extend jQuery, since it does not seem to be available as \"jQuery\" or is missing basic functionality';\n\t\t}\n\n\t\tif( !$.jqueryAnnexData ){\n\t\t\tthrow 'jQueryAnnex SaneDate Plugin | cannot extend jQuery Annex, since it does not seem to be available yet';\n\t\t}\n\t}());\n\n\n\n\t//--|SOLUTIONS-EXTENSION----------\n\n\t/*$.extend($.jqueryAnnexData, {\n\n\t});*/\n\n\n\n\t//--|JQUERY-$-GENERAL-FUNCTIONS----------\n\n\t$.extend({\n\n\t\t/**\n\t\t * @namespace Dates:$\n\t\t **/\n\n\t\t/**\n\t\t * @namespace Dates:$#SaneDate\n\t\t **/\n\n\t\t/**\n\t \t * Constructor. Instantiate with new $.SaneDate();\n\t \t *\n\t \t * @param {(Date|String|Number.Integer)} dateOrIsoStringOrYear - either a date object, an iso date(time) string to parse into a date or a year int\n\t \t * @param {?Number.Integer} [month] - month int between 1 and 12, if date is not built via iso string\n\t \t * @param {?Number.Integer} [date] - date int between 1 and 31, if date is not built via iso string\n\t \t * @param {?Number.Integer} [hours] - hours int between 0 and 23, if date is not built via iso string\n\t \t * @param {?Number.Integer} [minutes] - minutes int between 0 and 59, if date is not built via iso string\n\t \t * @param {?Number.Integer} [seconds] - seconds int between 0 and 59, if date is not built via iso string\n\t \t * @param {?Number.Integer} [milliseconds] - milliseconds int between 0 and 999, if date is not built via iso string\n\t \t * @return {SaneDate} the newly constructed SaneDate, either being valid or not\n\t \t *\n\t \t * @memberof Dates:$#SaneDate\n\t\t * @example\n\t\t * var date = new $.SaneDate('1-2-3 4:5:6.7');\n\t\t * date = new $.SaneDate('2016-4-7');\n\t\t * date = new $.SaneDate('2016-04-07 13:37:00');\n\t\t * date = new $.SaneDate(2016, 4, 7);\n\t\t * date = new $.SaneDate(2016, 4, 7, 13, 37, 0, 999);\n\t\t * date.year = 2000;\n\t\t * date.forward('hours', 42);\n\t \t *\n\t\t * @class SaneDate\n\t\t * @property {Boolean} valid - defines if the date is currently usable and represents a real date, not settable\n\t\t * @property {Boolean} utc - defines if the date is currently in utc mode, if used as setter, will call setUtc()\n\t\t * @property {Number.Integer} year - the current year of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} month - the current month of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} date - the currently day of the month of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} hours - the current hours of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} minutes - the current minutes of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} seconds - the current seconds of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} milliseconds - the current milliseconds of the date, settable (normally throws exception if change results in invalid date)\n\t\t *\n\t\t * @classdesc\n\t\t * SaneDate is a reimplementation of JavaScript date objects, trying to iron out all the small fails\n\t\t * which make you want to pull your hair while keeping the cool stuff in a streamlined manner.\n\t\t *\n\t\t * SaneDates operate between the years 0 and 9999 and, for the time being, don't deal with timezones apart\n\t\t * from the local one and UTC. Every SaneDate is local per se, even if created via an iso-string. To get\n\t\t * UTC-values just set the SaneDate to utc via .setUtc(true).\n\t\t *\n\t\t * The relevant date parts of a SaneDate, which are also available as attributes to get and set are:\n\t\t * year, month, date (not day!), hours, minutes, seconds and milliseconds.\n\t\t *\n\t\t * SaneDates are exception-happy and won't allow actions after instantiation that alter the date in automatic\n\t\t * ways, for example by setting a month to 13. You can alter this behaviour via .setIgnoreInvalidPartChanged(true).\n\t\t *\n\t\t * The constructor however should not except and will always return a sane date, whose .valid-attribute tells\n\t\t * you if the date has been buildable with the data you provided and is usable.\n\t\t *\n\t\t * Months and week days are not zero based in SaneDates but begin with 1. Week days are not an attribute\n\t\t * (and not settable), but accessible via .getWeekDay().\n\t\t *\n\t\t * This whole implementation is heavily built around iso strings, so building a date with one and getting one\n\t\t * to transfer should be forgiving, easy and robust. Something like '1-2-3 4:5:6.7' is a usable iso string\n\t\t * for SaneDate, but getIsoString() will return correctly formatted '0001-02-03T04:05:06.700'.\n\t\t **/\n\n\t\tSaneDate : function(){\n\t\t\t// see SANEDATE-IMPLEMENTATION below\n\t\t}\n\n\t});\n\n\n\n\t//--|JQUERY-OBJECT-GENERAL-FUNCTIONS----------\n\n\t/*$.fn.extend({\n\n\n\n\t});*/\n\n\n\n\t//--|SANEDATE-IMPLEMENTATION----------\n\n\t$.SaneDate = $.Class.extend(\n\t\t/**\n\t\t * @lends Dates:$#SaneDate.SaneDate.prototype\n\t\t **/\n\t\t{\n\n\t\t\t// ***\n\t\t\t_date : null,\n\t\t\t_compareDate : null,\n\t\t\t_utc : false,\n\t\t\t_ignoreInvalidPartChanged : false,\n\t\t\t_valid : true,\n\n\t\t\t// documentation in $.SaneDate signature above\n\t\t\tinit : function(dateOrIsoStringOrYear, month, date, hours, minutes, seconds, milliseconds){\n\t\t\t\tif( !$.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\tdateOrIsoStringOrYear = $.orDefault(dateOrIsoStringOrYear, null, 'string');\n\t\t\t\t}\n\n\t\t\t\tvar valid = true,\n\t\t\t\t\tparts = {\n\t\t\t\t\t\ttype : 'date',\n\t\t\t\t\t\tyear : null,\n\t\t\t\t\t\tmonth : $.orDefault(month, null, 'int'),\n\t\t\t\t\t\tdate : $.orDefault(date, null, 'int'),\n\t\t\t\t\t\thours : $.orDefault(hours, null, 'int'),\n\t\t\t\t\t\tminutes : $.orDefault(minutes, null, 'int'),\n\t\t\t\t\t\tseconds : $.orDefault(seconds, null, 'int'),\n\t\t\t\t\t\tmilliseconds : $.orDefault(milliseconds, null, 'int')\n\t\t\t\t\t}\n\t\t\t\t;\n\n\t\t\t\tthis._setupDatePartGettersAndSetters();\n\n\t\t\t\tif( !$.isSet(dateOrIsoStringOrYear) ){\n\t\t\t\t\tthis._date = new Date();\n\t\t\t\t} else if( $.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\tif( $.isNaN(dateOrIsoStringOrYear.getDate()) ){\n\t\t\t\t\t\tthis._setInvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._date = dateOrIsoStringOrYear;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif( !$.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\t\tif( (''+dateOrIsoStringOrYear).indexOf('-') < 0 ){\n\t\t\t\t\t\t\tparts.year = parseInt(dateOrIsoStringOrYear, 10);\n\n\t\t\t\t\t\t\tif( $.isSet(parts.hours) ){\n\t\t\t\t\t\t\t\tparts.type = 'datetime';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparts = this._parseIsoString(dateOrIsoStringOrYear);\n\t\t\t\t\t\t\t} catch(ex){\n\t\t\t\t\t\t\t\tparts = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $.isSet(parts) ){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvalid = this._verifyDateParts(parts);\n\t\t\t\t\t\t} catch(ex){\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( !$.isSet(parts) || !valid ){\n\t\t\t\t\t\tthis._setInvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._date = this._partsToDate(parts);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_setupDatePartGettersAndSetters : function(){\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tpropertyConfig = {\n\t\t\t\t\t\tenumerable : true\n\t\t\t\t\t}\n\t\t\t\t;\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'valid', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(){\n\t\t\t\t\t\tthrow new Error('SaneDate set valid | valid is not settable');\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\treturn this._valid;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'utc', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(utc){\n\t\t\t\t\t\tthis.setUtc(utc);\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\treturn this._utc;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'year', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(year){\n\t\t\t\t\t\tyear = parseInt(year, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(year), 'SaneDate set year | value is not usable as int');\n\t\t\t\t\t\t$.assert((year >= 0 && year <= 9999), 'SaneDate set year | this implementation works with years between 0 and 9999');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(year, 'setUTCFullYear', 'getUTCFullYear', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(year, 'setFullYear', 'getFullYear', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCFullYear() : _this_._date.getFullYear();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'month', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(month){\n\t\t\t\t\t\tmonth = parseInt(month, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(month), 'SaneDate set month | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(month - 1, 'setUTCMonth', 'getUTCMonth', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(month - 1, 'setMonth', 'getMonth', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMonth() + 1 : _this_._date.getMonth() + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'date', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(date){\n\t\t\t\t\t\tdate = parseInt(date, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(date), 'SaneDate set date | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(date, 'setUTCDate', 'getUTCDate', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(date, 'setDate', 'getDate', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCDate() : _this_._date.getDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'hours', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(hours){\n\t\t\t\t\t\thours = parseInt(hours, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(hours), 'SaneDate set hours | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(hours, 'setUTCHours', 'getUTCHours', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(hours, 'setHours', 'getHours', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCHours() : _this_._date.getHours();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'minutes', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(minutes){\n\t\t\t\t\t\tminutes = parseInt(minutes, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(minutes), 'SaneDate set minutes | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(minutes, 'setUTCMinutes', 'getUTCMinutes', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(minutes, 'setMinutes', 'getMinutes', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMinutes() : _this_._date.getMinutes();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'seconds', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(seconds){\n\t\t\t\t\t\tseconds = parseInt(seconds, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(seconds), 'SaneDate set seconds | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(seconds, 'setUTCSeconds', 'getUTCSeconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(seconds, 'setSeconds', 'getSeconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCSeconds() : _this_._date.getSeconds();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'milliseconds', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(milliseconds){\n\t\t\t\t\t\tmilliseconds = parseInt(milliseconds, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(milliseconds), 'SaneDate set milliseconds | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(milliseconds, 'setUTCMilliseconds', 'getUTCMilliseconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(milliseconds, 'setMilliseconds', 'getMilliseconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMilliseconds() : _this_._date.getMilliseconds();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t},\n\t\t\t// ***\n\n\n\n\t\t\t/**\n\t\t\t * Define if the date should return UTC-info or local info.\n\t\t\t * The default are local values, set this to true to automatically retrieve UTC-values.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {Boolean} utc - define if date should behave as UTC date\n\t\t\t * @return {SaneDate} this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.setUtc(true);\n\t\t\t **/\n\t\t\tsetUtc : function(utc){\n\t\t\t\tthis._utc = !!utc;\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Define if the date should ignore changes to date parts and keep the old value or throw an exception.\n\t\t\t * Normally those changes result in an exception to be immediately notified of changes that make the date invalid.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {Boolean} ignoreInvalidPartChanged - define if date should ignore invalid changes to the date or throw exception\n\t\t\t * @return {SaneDate} this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.setIgnoreInvalidPartChanged(true);\n\t\t\t **/\n\t\t\tsetIgnoreInvalidPartChanged : function(ignoreInvalidPartChanged){\n\t\t\t\tthis._ignoreInvalidPartChanged = !!ignoreInvalidPartChanged;\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the current day of the week as a number between 1 and 7.\n\t\t\t * This method counts days the European way, starting with monday normally, but you can change this\n\t\t\t * behaviour using the first parameter.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {?Boolean} [startingWithMonday=true] - set false if you want sunday to be the first day of the week\n\t\t\t * @return {Number.Integer} weekday index between 1 and 7\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * if( d.getWeekDay() == 5 ){\n\t\t\t *   alert('Thank god it\\'s friday!');\n\t\t\t * }\n\t\t\t **/\n\t\t\tgetWeekDay : function(startingWithMonday){\n\t\t\t\tstartingWithMonday = $.orDefault(startingWithMonday, true, 'bool');\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar day = this._utc ? this._date.getUTCDay() : this._date.getDay();\n\n\t\t\t\t\tif( startingWithMonday && (day === 0) ){\n\t\t\t\t\t\tday = 7;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( !startingWithMonday ){\n\t\t\t\t\t\tday += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn day;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the date's current date related data as a date iso-string.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {String} date iso-string of the format '2016-04-07'\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * $thatDatePicker.setValue(d.getIsoDateString());\n\t\t\t **/\n\t\t\tgetIsoDateString : function(){\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar year = this._utc ? this._date.getUTCFullYear() : this._date.getFullYear(),\n\t\t\t\t\t\tmonth = this._utc ? this._date.getUTCMonth() + 1 : this._date.getMonth() + 1,\n\t\t\t\t\t\tdate = this._utc ? this._date.getUTCDate() : this._date.getDate();\n\n\t\t\t\t\tyear = ''+year;\n\t\t\t\t\tmonth = (month < 10) ? '0'+month : ''+month;\n\t\t\t\t\tdate = (date < 10) ? '0'+date : ''+date;\n\n\t\t\t\t\tif( year < 1000 ){\n\t\t\t\t\t\tyear = this._padValueWithZero(year, 4);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $.strFormat('{year}-{month}-{date}', {year : year, month : month, date : date});\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the date as an iso-string.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {?Boolean} [withSeparator=true] - defines if date and time should be separated with a \"T\"\n\t\t\t * @return {String} iso-string of the format '2016-04-07T13:37:00.222'\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * $thatDateTimePicker.setValue(d.getIsoString());\n\t\t\t **/\n\t\t\tgetIsoString : function(withSeparator){\n\t\t\t\twithSeparator = $.orDefault(withSeparator, true, 'bool');\n\n\t\t\t\tvar dateString = this.getIsoDateString();\n\n\t\t\t\tif( $.isSet(dateString) ){\n\t\t\t\t\tvar hours = this._utc ? this._date.getUTCHours() : this._date.getHours(),\n\t\t\t\t\t\tminutes = this._utc ? this._date.getUTCMinutes() : this._date.getMinutes(),\n\t\t\t\t\t\tseconds = this._utc ? this._date.getUTCSeconds() : this._date.getSeconds(),\n\t\t\t\t\t\tmilliseconds = this._utc ? this._date.getUTCMilliseconds() : this._date.getMilliseconds();\n\n\t\t\t\t\t\thours = (hours < 10) ? '0'+hours : ''+hours;\n\t\t\t\t\t\tminutes = (minutes < 10) ? '0'+minutes : ''+minutes;\n\t\t\t\t\t\tseconds = (seconds < 10) ? '0'+seconds : ''+seconds;\n\t\t\t\t\t\tmilliseconds = ''+milliseconds;\n\n\t\t\t\t\t\treturn dateString+(withSeparator ? 'T' : ' ')+$.strFormat('{hours}:{minutes}:{seconds}.{milliseconds}', {\n\t\t\t\t\t\t\thours : hours,\n\t\t\t\t\t\t\tminutes : minutes,\n\t\t\t\t\t\t\tseconds : seconds,\n\t\t\t\t\t\t\tmilliseconds : milliseconds\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Return the current original JavaScript date object wrapped by the SameDate.\n\t\t\t * Use this to do special things.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {(null|Date)} the original JavaScript date object or null if the date is not valid\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * var timezoneOffset = d.getVanillaDate().getTimezoneOffset();\n\t\t\t **/\n\t\t\tgetVanillaDate : function(){\n\t\t\t\tif( this._valid ){\n\t\t\t\t\treturn this._date;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Compares the date to another SaneDate or an iso string.\n\t\t\t * Returns a classical comparator value (-1/0/1), being -1 if the date is smaller than the parameter.\n\t\t\t * Normally checks date and time. Set type to \"date\" to only check date.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Date)} isoStringOrSaneDate - either an iso string or another SaneDate to compare to\n\t\t\t * @param {?String} [type='datetime'] - either 'datetime' or 'date', telling the method if time should be considered\n\t\t\t * @param {?Boolean} [withMilliseconds=true] - tells the method if milliseconds should be considered if type is 'datetime'\n\t\t\t * @return {Number.Integer} -1 if this is smaller/earlier, 0 if identical, 1 if parameter if bigger/later\n\t\t\t * @throws on unusable base or compare date\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * if( d.compareTo('2016-04-07', 'date') === 0 ){\n\t\t\t *   alert('congratulations, that\\'s the same date!');\n\t\t\t * }\n\t\t\t **/\n\t\t\tcompareTo : function(isoStringOrSaneDate, type, withMilliseconds){\n\t\t\t\ttype = $.orDefault(type, 'datetime', 'string');\n\t\t\t\twithMilliseconds = $.orDefault(withMilliseconds, true, 'bool');\n\n\t\t\t\tvar _this_ = this;\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar saneDate = null;\n\t\t\t\t\tif( $.isA(isoStringOrSaneDate, 'object') && $.hasMembers(isoStringOrSaneDate, ['_date', '_valid']) ){\n\t\t\t\t\t\tsaneDate = isoStringOrSaneDate;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsaneDate = new $.SaneDate(''+isoStringOrSaneDate);\n\t\t\t\t\t}\n\n\t\t\t\t\tif( saneDate._valid ){\n\t\t\t\t\t\tvar comparator = 0,\n\t\t\t\t\t\t\tdateCompareGetters = ['getFullYear', 'getMonth', 'getDate'],\n\t\t\t\t\t\t\ttimeCompareGetters = ['getHours', 'getMinutes', 'getSeconds'],\n\t\t\t\t\t\t\tmillisecondsCompareGetters = ['getMilliseconds'],\n\t\t\t\t\t\t\tcompareGetters = [];\n\n\t\t\t\t\t\t$.merge(compareGetters, dateCompareGetters);\n\t\t\t\t\t\tif( type === 'datetime' ){\n\t\t\t\t\t\t\t$.merge(compareGetters, timeCompareGetters);\n\n\t\t\t\t\t\t\tif( withMilliseconds ){\n\t\t\t\t\t\t\t\t$.merge(compareGetters, millisecondsCompareGetters);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar ownValue, compareValue;\n\t\t\t\t\t\t$.each(compareGetters, function(index, compareGetter){\n\t\t\t\t\t\t\townValue = _this_._date[compareGetter]();\n\t\t\t\t\t\t\tcompareValue = saneDate._date[compareGetter]();\n\t\t\t\t\t\t\tcomparator =\n\t\t\t\t\t\t\t\t(compareValue > ownValue)\n\t\t\t\t\t\t\t\t? -1\n\t\t\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t\t\t(ownValue > compareValue)\n\t\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t;\n\n\t\t\t\t\t\t\tif( comparator !== 0 ){\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn comparator;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('SaneDate compareTo | invalid compare date');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('SaneDate compareTo | date currently not comparable');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : -1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - negative or positive integer defining the offset from the current date\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.move('years', 10).move('milliseconds', -1);\n\t\t\t **/\n\t\t\tmove : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tparts = ['years', 'months', 'days', 'hours', 'minutes', 'seconds', 'milliseconds'];\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar partDict = {};\n\t\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\t\tpartDict[''+part] = amount;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpartDict = part;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tif( $.inArray(''+part, parts) >= 0 ){\n\t\t\t\t\t\t\tswitch( ''+part ){\n\t\t\t\t\t\t\t\tcase 'years':\n\t\t\t\t\t\t\t\t\t_this_._date.setFullYear(_this_._date.getFullYear() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'months':\n\t\t\t\t\t\t\t\t\t_this_._date.setMonth(_this_._date.getMonth() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'days':\n\t\t\t\t\t\t\t\t\t_this_._date.setDate(_this_._date.getDate() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'hours':\n\t\t\t\t\t\t\t\t\t_this_._date.setHours(_this_._date.getHours() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'minutes':\n\t\t\t\t\t\t\t\t\t_this_._date.setMinutes(_this_._date.getMinutes() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'seconds':\n\t\t\t\t\t\t\t\t\t_this_._date.setSeconds(_this_._date.getSeconds() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'milliseconds':\n\t\t\t\t\t\t\t\t\t_this_._date.setMilliseconds(_this_._date.getMilliseconds() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('SaneDate _move | part must be one of years, months, days, hours, minutes, seconds, milliseconds');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('SaneDate _move | current date is not usable');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time forward a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : 1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - integer defining the positve offset from the current date, '-' is dropped if present\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.forward('hours', 8);\n\t\t\t **/\n\t\t\tforward : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar partDict = {};\n\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\tpartDict[''+part] = Math.abs(amount);\n\t\t\t\t} else {\n\t\t\t\t\tpartDict = part;\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tpartDict[part] = Math.abs(amount);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.move(partDict);\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time back a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : 1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - integer defining the negative offset from the current date, '-' is dropped if present\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.back('years', 1000);\n\t\t\t **/\n\t\t\tback : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar partDict = {};\n\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\tpartDict[''+part] = ((amount === 0) ? 0 : -Math.abs(amount));\n\t\t\t\t} else {\n\t\t\t\t\tpartDict = part;\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tpartDict[part] = ((amount === 0) ? 0 : -Math.abs(amount));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.move(partDict);\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Calculates a timedata between two SaneDates.\n\t\t\t *\n\t\t\t * The result is a plain object with the delta's units up to the defined \"largestUnit\". All values are ints.\n\t\t\t * The largest unit are days, since above neither months nor years are calculable via a fixed divisor and therefore\n\t\t\t * useless.\n\t\t\t *\n\t\t\t * By default the order does not matter and only the absolute value is used, but you can change this\n\t\t\t * through the parameter \"absolute\".\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|SaneDate)} isoStringOrSaneDate - the date to calculate the delta against as an iso-string or a SaneDate\n\t\t\t * @param {?String} [largestUnit='days'] - the largestUnit to differentiate in the result\n\t\t\t * @param {?Boolean} [absolute=true] - if set false, returns negative values if first parameter is later than this date\n\t\t\t * @return {Object} timedelta in the format {days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5}\n\t\t\t * @throws on unknown largestUnit\n\t\t\t * @example\n\t\t\t * var now = new $.SaneDate();\n\t\t\t * var theFuture = now.clone().forward({days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5});\n\t\t\t * now.delta(theFuture)\n\t\t\t * => {days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5}\n\t\t\t * now.delta(theFuture, 'hours', false)\n\t\t\t * => {hours : -26, minutes : -3, seconds : -4, milliseconds : -5}\n\t\t\t **/\n\t\t\tdelta : function(isoStringOrSaneDate, largestUnit, absolute){\n\t\t\t\tlargestUnit = $.orDefault(largestUnit, 'days', 'string');\n\t\t\t\tif( $.inArray(largestUnit, ['days', 'hours', 'minutes', 'seconds', 'milliseconds']) < 0 ){\n\t\t\t\t\tthrow new Error('SaneDate delta | largestUnit must be one of \"days\", \"hours\", \"minutes\", \"seconds\" or \"milliseconds\"');\n\t\t\t\t}\n\t\t\t\tabsolute = $.orDefault(absolute, true, 'bool');\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar saneDate = null,\n\t\t\t\t\t\tdelta = null,\n\t\t\t\t\t\tparts = {};\n\n\t\t\t\t\tif( $.isA(isoStringOrSaneDate, 'object') && $.hasMembers(isoStringOrSaneDate, ['_date', '_valid']) ){\n\t\t\t\t\t\tsaneDate = isoStringOrSaneDate;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsaneDate = new $.SaneDate(''+isoStringOrSaneDate);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelta =\n\t\t\t\t\t\tabsolute\n\t\t\t\t\t\t? Math.abs(this._date.getTime() - saneDate._date.getTime())\n\t\t\t\t\t\t: (this._date.getTime() - saneDate._date.getTime())\n\t\t\t\t\t;\n\n\t\t\t\t\tvar negativeDelta = delta < 0;\n\t\t\t\t\tdelta = Math.abs(delta);\n\n\t\t\t\t\tif( largestUnit === 'days' ){\n\t\t\t\t\t\tparts.days = Math.floor(delta / 1000 / 60 / 60 / 24);\n\t\t\t\t\t\tdelta -= parts.days * 1000 * 60 * 60 * 24;\n\t\t\t\t\t\tlargestUnit = 'hours';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'hours' ){\n\t\t\t\t\t\tparts.hours = Math.floor(delta / 1000 / 60 / 60);\n\t\t\t\t\t\tdelta -= parts.hours * 1000 * 60 * 60;\n\t\t\t\t\t\tlargestUnit = 'minutes';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'minutes' ){\n\t\t\t\t\t\tparts.minutes = Math.floor(delta / 1000 / 60);\n\t\t\t\t\t\tdelta -= parts.minutes * 1000 * 60;\n\t\t\t\t\t\tlargestUnit = 'seconds';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'seconds' ){\n\t\t\t\t\t\tparts.seconds = Math.floor(delta / 1000);\n\t\t\t\t\t\tdelta -= parts.seconds * 1000;\n\t\t\t\t\t\tlargestUnit = 'milliseconds';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'milliseconds' ){\n\t\t\t\t\t\tparts.milliseconds = delta;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( negativeDelta ){\n\t\t\t\t\t\t$.each(parts, function(partName, partValue){\n\t\t\t\t\t\t\tparts[partName] = (partValue === 0) ? 0 : -partValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn parts;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns a copy of the current SaneDate.\n\t\t\t * Might be very handy for creating dates based on another with an offset for example.\n\t\t\t * Keeps UTC mode.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {SaneDate} copy of this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * var theFuture = d.clone().forward('hours', 8);\n\t\t\t **/\n\t\t\tclone : function(){\n\t\t\t\tvar clonedSaneDate = new $.SaneDate(new Date(this.getVanillaDate().getTime()));\n\t\t\t\tclonedSaneDate.setUtc(this._utc);\n\n\t\t\t\treturn clonedSaneDate;\n\t\t\t},\n\n\n\n\t\t\t_setInvalid : function(){\n\t\t\t\tthis._date = null;\n\t\t\t\tthis._valid = false;\n\t\t\t},\n\n\n\n\t\t\t_padValueWithZero : function(value, digitCount){\n\t\t\t\tdigitCount = $.orDefault(digitCount, 2, 'int');\n\t\t\t\tvalue = parseInt(value, 10);\n\t\t\t\t$.assert(!$.isNaN(value), 'SaneDate _padValueWithZero | value is not usable as int');\n\t\t\t\tvalue = ''+value;\n\n\t\t\t\tvar valueLength = value.length;\n\t\t\t\tif( valueLength < digitCount ){\n\t\t\t\t\tfor( var i = 0; i < (digitCount - valueLength); i++ ){\n\t\t\t\t\t\tvalue = '0'+value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t},\n\n\n\n\t\t\t_partsToDate : function(parts, localTime){\n\t\t\t\tlocalTime = $.orDefault(localTime, false, 'bool');\n\n\t\t\t\tvar dateParts = $.extend({}, parts);\n\t\t\t\tdateParts.year = this._padValueWithZero(dateParts.year, 4);\n\t\t\t\tdateParts.month = this._padValueWithZero(dateParts.month);\n\t\t\t\tdateParts.date = this._padValueWithZero(dateParts.date);\n\n\t\t\t\tif( dateParts.type === 'date' ){\n\t\t\t\t\treturn new Date($.strFormat('{year}-{month}-{date}T00:00:00.0', dateParts));\n\t\t\t\t} else if( dateParts.type === 'datetime' ){\n\t\t\t\t\tdateParts.hours = this._padValueWithZero(dateParts.hours);\n\t\t\t\t\tdateParts.minutes = this._padValueWithZero(dateParts.minutes);\n\t\t\t\t\tdateParts.seconds = this._padValueWithZero(dateParts.seconds);\n\n\t\t\t\t\tif( $.isSet(dateParts.milliseconds) ){\n\t\t\t\t\t\tdateParts.seconds += '.'+dateParts.milliseconds;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateWithoutOffset = new Date($.strFormat('{year}-{month}-{date}T{hours}:{minutes}:{seconds}', dateParts));\n\n\t\t\t\t\tif( !localTime ){\n\t\t\t\t\t\treturn dateWithoutOffset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new Date(dateWithoutOffset.getTime() - (dateWithoutOffset.getTimezoneOffset() * 60000));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('_partsToDate | unknown type');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_verifyDateParts : function(parts){\n\t\t\t\tvar date = this._partsToDate(parts);\n\t\t\t\tif( parts.type === 'date' ){\n\t\t\t\t\treturn (parseInt(parts.year, 10) === (this._utc ? date.getUTCFullYear() : date.getFullYear()))\n\t\t\t\t\t\t&& (parseInt(parts.month, 10) === (this._utc ? date.getUTCMonth() + 1 : date.getMonth() + 1))\n\t\t\t\t\t\t&& (parseInt(parts.date, 10) === (this._utc ? date.getUTCDate() : date.getDate()));\n\t\t\t\t} else if( parts.type === 'datetime' ){\n\t\t\t\t\treturn (parseInt(parts.year, 10) === (this._utc ? date.getUTCFullYear() : date.getFullYear()))\n\t\t\t\t\t\t&& (parseInt(parts.month, 10) === (this._utc ? date.getUTCMonth() + 1 : date.getMonth() + 1))\n\t\t\t\t\t\t&& (parseInt(parts.date, 10) === (this._utc ? date.getUTCDate() : date.getDate()))\n\t\t\t\t\t\t&& (parseInt(parts.hours, 10) === (this._utc ? date.getUTCHours() : date.getHours()))\n\t\t\t\t\t\t&& (parseInt(parts.minutes, 10) === (this._utc ? date.getUTCMinutes() : date.getMinutes()))\n\t\t\t\t\t\t&& (parseInt(parts.seconds, 10) === (this._utc ? date.getUTCSeconds() : date.getSeconds()))\n\t\t\t\t\t\t&& ($.isSet(parts.milliseconds) ? (parseInt(parts.milliseconds, 10) === (this._utc ? date.getUTCMilliseconds() : date.getMilliseconds())) : true);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('_verifyDateParts | unknown type');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_parseIsoString : function(isoString){\n\t\t\t\tisoString = ''+isoString;\n\n\t\t\t\tvar parts = {\n\t\t\t\t\ttype : 'date',\n\t\t\t\t\tyear : null,\n\t\t\t\t\tmonth : null,\n\t\t\t\t\tdate : null,\n\t\t\t\t\thours : null,\n\t\t\t\t\tminutes : null,\n\t\t\t\t\tseconds : null,\n\t\t\t\t\tmilliseconds : null\n\t\t\t\t};\n\n\t\t\t\tvar isoStringParts = isoString.split('T');\n\n\t\t\t\tif( isoStringParts.length === 1 ){\n\t\t\t\t\tisoStringParts = isoStringParts[0].split(' ');\n\t\t\t\t}\n\n\t\t\t\tif( isoStringParts.length >= 2 ){\n\t\t\t\t\tvar isoStringTimeParts = isoStringParts[1].split(':');\n\n\t\t\t\t\tif( isoStringTimeParts.length >= 3 ){\n\t\t\t\t\t\tvar hours = parseInt(isoStringTimeParts[0], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(hours), 'SaneDate _parseIsoString | hours not usable as int');\n\t\t\t\t\t\tparts.hours = this._padValueWithZero(hours);\n\n\t\t\t\t\t\tvar minutes = parseInt(isoStringTimeParts[1], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(minutes), 'SaneDate _parseIsoString | minutes not usable as int');\n\t\t\t\t\t\tparts.minutes = this._padValueWithZero(minutes);\n\n\t\t\t\t\t\tvar isoStringSecondsParts = isoStringTimeParts[2];\n\t\t\t\t\t\tisoStringSecondsParts = $.strReplace('Z', '', isoStringSecondsParts);\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('+')[0];\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('-')[0];\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('.');\n\n\t\t\t\t\t\tif( isoStringSecondsParts.length >= 2 ){\n\t\t\t\t\t\t\tvar milliseconds = parseInt(isoStringSecondsParts[1], 10);\n\t\t\t\t\t\t\t$.assert(!$.isNaN(milliseconds), 'SaneDate _parseIsoString | milliseconds not usable as int');\n\t\t\t\t\t\t\tparts.milliseconds = ''+milliseconds;\n\n\t\t\t\t\t\t\tif( parts.milliseconds.length > 3 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = parts.milliseconds.substr(0, 3);\n\t\t\t\t\t\t\t} else if( parts.milliseconds.length === 2 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = ''+(milliseconds * 10);\n\t\t\t\t\t\t\t} else if( parts.milliseconds.length === 1 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = ''+(milliseconds * 100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar seconds = parseInt(isoStringSecondsParts[0], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(seconds), 'SaneDate _parseIsoString | seconds not usable as int');\n\t\t\t\t\t\tparts.seconds = this._padValueWithZero(seconds);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tparts.type = 'datetime';\n\t\t\t\t}\n\n\t\t\t\tvar isoStringDateParts = isoStringParts[0].split('-');\n\t\t\t\tif( isoStringDateParts.length >= 3 ){\n\t\t\t\t\tvar year = parseInt(isoStringDateParts[0], 10);\n\t\t\t\t\t$.assert(!$.isNaN(year), 'SaneDate _parseIsoString | year not usable as int');\n\t\t\t\t\t$.assert((year >= 0 && year <= 9999), 'SaneDate _parseIsoString | this implementation works with years between 0 and 9999');\n\t\t\t\t\tparts.year = this._padValueWithZero(year, 4);\n\n\t\t\t\t\tvar month = parseInt(isoStringDateParts[1], 10);\n\t\t\t\t\t$.assert(!$.isNaN(month), 'SaneDate _parseIsoString | month not usable as int');\n\t\t\t\t\tparts.month = this._padValueWithZero(month);\n\n\t\t\t\t\tvar date = parseInt(isoStringDateParts[2], 10);\n\t\t\t\t\t$.assert(!$.isNaN(date), 'SaneDate _parseIsoString | date not usable as int');\n\t\t\t\t\tparts.date = this._padValueWithZero(date);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn this._verifyDateParts(parts) ? parts : null;\n\t\t\t},\n\n\n\n\t\t\t_tryDatePartChange : function(value, setter, getter, throwExceptionOnFail){\n\t\t\t\tthrowExceptionOnFail = $.orDefault(throwExceptionOnFail, false, 'bool');\n\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tallDatePartGetters = [\n\t\t\t\t\t'getFullYear',\n\t\t\t\t\t'getMonth',\n\t\t\t\t\t'getDate',\n\t\t\t\t\t'getHours',\n\t\t\t\t\t'getMinutes',\n\t\t\t\t\t'getSeconds',\n\t\t\t\t\t'getMilliseconds'\n\t\t\t\t],\n\t\t\t\tallDatePartGettersUTC = [\n\t\t\t\t\t'getUTCFullYear',\n\t\t\t\t\t'getUTCMonth',\n\t\t\t\t\t'getUTCDate',\n\t\t\t\t\t'getUTCHours',\n\t\t\t\t\t'getUTCMinutes',\n\t\t\t\t\t'getUTCSeconds',\n\t\t\t\t\t'getUTCMilliseconds'\n\t\t\t\t];\n\n\t\t\t\tif( $.isSet(this._date) ){\n\t\t\t\t\tthis._compareDate = new Date(this._date.getTime());\n\t\t\t\t\tthis._date[setter](value);\n\n\t\t\t\t\tvar changed = false;\n\t\t\t\t\t$.each(this._utc ? allDatePartGettersUTC : allDatePartGetters, function(index, datePartGetter){\n\t\t\t\t\t\tif( datePartGetter !== getter ){\n\t\t\t\t\t\t\tchanged = changed || (_this_._date[datePartGetter]() !== _this_._compareDate[datePartGetter]());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( changed ){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif( changed ){\n\t\t\t\t\t\tthis._date = this._compareDate;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._compareDate = null;\n\n\t\t\t\t\tif( !throwExceptionOnFail ){\n\t\t\t\t\t\treturn changed;\n\t\t\t\t\t} else if( changed ){\n\t\t\t\t\t\tthrow new Error('SaneDate _tryDatePartChange | date part change is invalid or would change other parts');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif( !throwExceptionOnFail ){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('SaneDate _tryDatePartChange | no date to change the part of');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t);\n\n\treturn $;\n\n}));\n"],"names":["global","factory","jQuery","$","define","amd","module","exports","__AVA_ENV__","require","jqueryAnnexData","ex","window","this","fn","jquery","extend","SaneDate","Class","_date","_compareDate","_utc","_ignoreInvalidPartChanged","_valid","init","dateOrIsoStringOrYear","month","date","hours","minutes","seconds","milliseconds","isA","orDefault","valid","parts","type","year","_setupDatePartGettersAndSetters","isSet","isNaN","getDate","_setInvalid","indexOf","parseInt","_parseIsoString","_verifyDateParts","_partsToDate","Date","_this_","propertyConfig","enumerable","Object","defineProperty","set","Error","get","utc","setUtc","assert","_tryDatePartChange","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","setIgnoreInvalidPartChanged","ignoreInvalidPartChanged","getWeekDay","startingWithMonday","day","getUTCDay","getDay","getIsoDateString","_padValueWithZero","strFormat","getIsoString","withSeparator","dateString","getVanillaDate","compareTo","isoStringOrSaneDate","withMilliseconds","comparator","ownValue","compareValue","saneDate","hasMembers","merge","compareGetters","each","index","compareGetter","move","part","amount","partDict","isPlainObject","inArray","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","forward","Math","abs","back","delta","largestUnit","absolute","negativeDelta","getTime","days","floor","partName","partValue","clone","clonedSaneDate","value","digitCount","valueLength","length","i","localTime","dateParts","dateWithoutOffset","getTimezoneOffset","isoString","isoStringParts","split","isoStringTimeParts","isoStringSecondsParts","strReplace","substr","isoStringDateParts","setter","getter","throwExceptionOnFail","changed","datePartGetter"],"mappings":"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"}