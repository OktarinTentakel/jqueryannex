{"version":3,"sources":["jquery.annex.sanedate-plugin.js"],"names":["global","factory","jQuery","$","define","amd","module","exports","__AVA_ENV__","require","jqueryAnnexData","ex","window","this","fn","jquery","extend","SaneDate","Class","_date","_compareDate","_utc","_ignoreInvalidPartChanged","_valid","init","dateOrIsoStringOrYear","month","date","hours","minutes","seconds","milliseconds","isA","orDefault","valid","parts","type","year","_setupDatePartGettersAndSetters","isSet","isNaN","getDate","_setInvalid","indexOf","parseInt","_parseIsoString","_verifyDateParts","_partsToDate","Date","_this_","propertyConfig","enumerable","Object","defineProperty","set","Error","get","utc","setUtc","assert","_tryDatePartChange","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","setIgnoreInvalidPartChanged","ignoreInvalidPartChanged","getWeekDay","startingWithMonday","day","getUTCDay","getDay","getIsoDateString","_padValueWithZero","strFormat","getIsoString","withSeparator","dateString","getVanillaDate","compareTo","isoStringOrSaneDate","withMilliseconds","saneDate","hasMembers","comparator","dateCompareGetters","timeCompareGetters","millisecondsCompareGetters","compareGetters","merge","ownValue","compareValue","each","index","compareGetter","move","part","amount","partDict","isPlainObject","inArray","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","setMilliseconds","forward","Math","abs","back","delta","largestUnit","absolute","getTime","negativeDelta","days","floor","partName","partValue","clone","clonedSaneDate","value","digitCount","valueLength","length","i","localTime","dateParts","dateWithoutOffset","getTimezoneOffset","isoString","isoStringParts","split","isoStringTimeParts","isoStringSecondsParts","strReplace","substr","isoStringDateParts","setter","getter","throwExceptionOnFail","allDatePartGetters","allDatePartGettersUTC","changed","datePartGetter"],"mappings":"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","file":"jquery.annex.sanedate-plugin.js","sourcesContent":["/**\n * jQueryAnnex - SaneDate Plugin\n * This plugin is the attempt to make JS date objects more sane and thereby usable.\n * The Date object is one of the most badly designed parts of the JS core with so many quirks, inconsistencies and traps to fall into\n * as a developer, that I took it upon me to implement a small framework to deal with dates and timestamps in a less headachy way.\n * \n * Think as this as a python inspired little brother of moment.js.\n * \n * The core of this plugin is the SaneDate class, wrapping a vanilla Date object. See class and function definitions for further documentation\n * and have a look at /test/core/dates.js for more usage examples.\n *\n * This plugin automatically gets unit-tested via Ava ob build (tests are in /test/core/dates.js).\n *\n * @author Sebastian Schlapkohl <jqueryannex@ifschleife.de>\n * @version Revision 41 developed and tested with jQuery 3.3.1, 2.2.4 and 1.12.4\n **/\n\n\n\n// automatically determine if annex should be loaded traditionally, as an AMD-module or via commonjs, if included before anything that\n// exposes \"define\" (require.js e.g.), it will load normally, extending jQuery directly and globally\n// if loaded as AMD-module it expects Annex to be available as \"jqueryannex\"\n(function(global, factory){\n\tvar jQuery = global.jQuery || global.$;\n\n\tif( (typeof define === 'function') && define.amd ){\n\t\tdefine(['jqueryannex'], factory);\n\t} else if( (typeof module === 'object') && module.exports ){\n\t\tif( !global.__AVA_ENV__ ){\n\t\t\ttry {\n\t\t\t\tif( !jQuery ){\n\t\t\t\t\tjQuery = require('jquery');\n\t\t\t\t}\n\n\t\t\t\tif( !jQuery.jqueryAnnexData ){\n\t\t\t\t\tjQuery = require('jqueryannex');\n\t\t\t\t}\n\t\t\t} catch(ex){}\n\t\t}\n\n\t\tmodule.exports = jQuery\n\t\t\t? factory(jQuery)\n\t\t\t: function(jQuery){\n\t\t\t\treturn factory(jQuery);\n\t\t\t}\n\t\t;\n\t} else {\n\t\tfactory(jQuery);\n\t}\n}((typeof window !== 'undefined') ? window : this, function($){\n\n\t//--|CHECK-AND-PREPARE-JQUERY----------\n\n\t(function(){\n\t\tif( !$ || !$.fn || !$().jquery ){\n\t\t\tthrow 'jQueryAnnex SaneDate Plugin | cannot extend jQuery, since it does not seem to be available as \"jQuery\" or is missing basic functionality';\n\t\t}\n\n\t\tif( !$.jqueryAnnexData ){\n\t\t\tthrow 'jQueryAnnex SaneDate Plugin | cannot extend jQuery Annex, since it does not seem to be available yet';\n\t\t}\n\t}());\n\n\n\n\t//--|SOLUTIONS-EXTENSION----------\n\n\t/*$.extend($.jqueryAnnexData, {\n\t\t\n\t});*/\n\n\n\n\t//--|JQUERY-$-GENERAL-FUNCTIONS----------\n\n\t$.extend({\n\n\t\t/**\n\t\t * @namespace Dates:$\n\t\t **/\n\n\t\t/**\n\t\t * @namespace Dates:$#SaneDate\n\t\t **/\n\n\t\t/**\n\t \t * Constructor. Instantiate with new $.SaneDate();\n\t \t *\n\t \t * @param {(Date|String|Number.Integer)} dateOrIsoStringOrYear - either a date object, an iso date(time) string to parse into a date or a year int\n\t \t * @param {?Number.Integer} [month] - month int between 1 and 12, if date is not built via iso string\n\t \t * @param {?Number.Integer} [date] - date int between 1 and 31, if date is not built via iso string\n\t \t * @param {?Number.Integer} [hours] - hours int between 0 and 23, if date is not built via iso string\n\t \t * @param {?Number.Integer} [minutes] - minutes int between 0 and 59, if date is not built via iso string\n\t \t * @param {?Number.Integer} [seconds] - seconds int between 0 and 59, if date is not built via iso string\n\t \t * @param {?Number.Integer} [milliseconds] - milliseconds int between 0 and 999, if date is not built via iso string\n\t \t * @return {SaneDate} the newly constructed SaneDate, either being valid or not\n\t \t *\n\t \t * @memberof Dates:$#SaneDate\n\t\t * @example\n\t\t * var date = new $.SaneDate('1-2-3 4:5:6.7');\n\t\t * date = new $.SaneDate('2016-4-7');\n\t\t * date = new $.SaneDate('2016-04-07 13:37:00');\n\t\t * date = new $.SaneDate(2016, 4, 7);\n\t\t * date = new $.SaneDate(2016, 4, 7, 13, 37, 0, 999);\n\t\t * date.year = 2000;\n\t\t * date.forward('hours', 42);\n\t \t *\n\t\t * @class SaneDate\n\t\t * @property {Boolean} valid - defines if the date is currently usable and represents a real date, not settable\n\t\t * @property {Boolean} utc - defines if the date is currently in utc mode, if used as setter, will call setUtc()\n\t\t * @property {Number.Integer} year - the current year of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} month - the current month of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} date - the currently day of the month of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} hours - the current hours of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} minutes - the current minutes of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} seconds - the current seconds of the date, settable (normally throws exception if change results in invalid date)\n\t\t * @property {Number.Integer} milliseconds - the current milliseconds of the date, settable (normally throws exception if change results in invalid date)\n\t\t *\n\t\t * @classdesc\n\t\t * SaneDate is a reimplementation of JavaScript date objects, trying to iron out all the small fails\n\t\t * which make you want to pull your hair while keeping the cool stuff in a streamlined manner.\n\t\t *\n\t\t * SaneDates operate between the years 0 and 9999 and, for the time being, don't deal with timezones apart\n\t\t * from the local one and UTC. Every SaneDate is local per se, even if created via an iso-string. To get\n\t\t * UTC-values just set the SaneDate to utc via .setUtc(true).\n\t\t *\n\t\t * The relevant date parts of a SaneDate, which are also available as attributes to get and set are:\n\t\t * year, month, date (not day!), hours, minutes, seconds and milliseconds.\n\t\t *\n\t\t * SaneDates are exception-happy and won't allow actions after instantiation that alter the date in automatic\n\t\t * ways, for example by setting a month to 13. You can alter this behaviour via .setIgnoreInvalidPartChanged(true).\n\t\t *\n\t\t * The constructor however should not except and will always return a sane date, whose .valid-attribute tells\n\t\t * you if the date has been buildable with the data you provided and is usable.\n\t\t *\n\t\t * Months and week days are not zero based in SaneDates but begin with 1. Week days are not an attribute\n\t\t * (and not settable), but accessible via .getWeekDay().\n\t\t *\n\t\t * This whole implementation is heavily built around iso strings, so building a date with one and getting one\n\t\t * to transfer should be forgiving, easy and robust. Something like '1-2-3 4:5:6.7' is a usable iso string\n\t\t * for SaneDate, but getIsoString() will return correctly formatted '0001-02-03T04:05:06.700'.\n\t\t **/\n\n\t\tSaneDate : function(){\n\t\t\t// see SANEDATE-IMPLEMENTATION below\n\t\t}\n\n\t});\n\n\n\n\t//--|JQUERY-OBJECT-GENERAL-FUNCTIONS----------\n\n\t/*$.fn.extend({\n\n\t\t\n\n\t});*/\n\n\n\n\t//--|SANEDATE-IMPLEMENTATION----------\n\n\t$.SaneDate = $.Class.extend(\n\t\t/**\n\t\t * @lends Dates:$#SaneDate.SaneDate.prototype\n\t\t **/\n\t\t{\n\n\t\t\t// ***\n\t\t\t_date : null,\n\t\t\t_compareDate : null,\n\t\t\t_utc : false,\n\t\t\t_ignoreInvalidPartChanged : false,\n\t\t\t_valid : true,\n\n\t\t\t// documentation in $.SaneDate signature above\n\t\t\tinit : function(dateOrIsoStringOrYear, month, date, hours, minutes, seconds, milliseconds){\n\t\t\t\tif( !$.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\tdateOrIsoStringOrYear = $.orDefault(dateOrIsoStringOrYear, null, 'string');\n\t\t\t\t}\n\n\t\t\t\tvar valid = true,\n\t\t\t\t\tparts = {\n\t\t\t\t\t\ttype : 'date',\n\t\t\t\t\t\tyear : null,\n\t\t\t\t\t\tmonth : $.orDefault(month, null, 'int'),\n\t\t\t\t\t\tdate : $.orDefault(date, null, 'int'),\n\t\t\t\t\t\thours : $.orDefault(hours, null, 'int'),\n\t\t\t\t\t\tminutes : $.orDefault(minutes, null, 'int'),\n\t\t\t\t\t\tseconds : $.orDefault(seconds, null, 'int'),\n\t\t\t\t\t\tmilliseconds : $.orDefault(milliseconds, null, 'int')\n\t\t\t\t\t}\n\t\t\t\t;\n\n\t\t\t\tthis._setupDatePartGettersAndSetters();\n\n\t\t\t\tif( !$.isSet(dateOrIsoStringOrYear) ){\n\t\t\t\t\tthis._date = new Date();\n\t\t\t\t} else if( $.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\tif( $.isNaN(dateOrIsoStringOrYear.getDate()) ){\n\t\t\t\t\t\tthis._setInvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._date = dateOrIsoStringOrYear;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif( !$.isA(dateOrIsoStringOrYear, 'date') ){\n\t\t\t\t\t\tif( (''+dateOrIsoStringOrYear).indexOf('-') < 0 ){\n\t\t\t\t\t\t\tparts.year = parseInt(dateOrIsoStringOrYear, 10);\n\n\t\t\t\t\t\t\tif( $.isSet(parts.hours) ){\n\t\t\t\t\t\t\t\tparts.type = 'datetime';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparts = this._parseIsoString(dateOrIsoStringOrYear);\n\t\t\t\t\t\t\t} catch(ex){\n\t\t\t\t\t\t\t\tparts = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $.isSet(parts) ){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvalid = this._verifyDateParts(parts);\n\t\t\t\t\t\t} catch(ex){\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( !$.isSet(parts) || !valid ){\n\t\t\t\t\t\tthis._setInvalid();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._date = this._partsToDate(parts);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_setupDatePartGettersAndSetters : function(){\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tpropertyConfig = {\n\t\t\t\t\t\tenumerable : true\n\t\t\t\t\t}\n\t\t\t\t;\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'valid', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(){\n\t\t\t\t\t\tthrow new Error('SaneDate set valid | valid is not settable');\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\treturn this._valid;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'utc', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(utc){\n\t\t\t\t\t\tthis.setUtc(utc);\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\treturn this._utc;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'year', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(year){\n\t\t\t\t\t\tyear = parseInt(year, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(year), 'SaneDate set year | value is not usable as int');\n\t\t\t\t\t\t$.assert((year >= 0 && year <= 9999), 'SaneDate set year | this implementation works with years between 0 and 9999');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(year, 'setUTCFullYear', 'getUTCFullYear', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(year, 'setFullYear', 'getFullYear', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCFullYear() : _this_._date.getFullYear();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'month', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(month){\n\t\t\t\t\t\tmonth = parseInt(month, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(month), 'SaneDate set month | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(month - 1, 'setUTCMonth', 'getUTCMonth', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(month - 1, 'setMonth', 'getMonth', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMonth() + 1 : _this_._date.getMonth() + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'date', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(date){\n\t\t\t\t\t\tdate = parseInt(date, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(date), 'SaneDate set date | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(date, 'setUTCDate', 'getUTCDate', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(date, 'setDate', 'getDate', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCDate() : _this_._date.getDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'hours', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(hours){\n\t\t\t\t\t\thours = parseInt(hours, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(hours), 'SaneDate set hours | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(hours, 'setUTCHours', 'getUTCHours', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(hours, 'setHours', 'getHours', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCHours() : _this_._date.getHours();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'minutes', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(minutes){\n\t\t\t\t\t\tminutes = parseInt(minutes, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(minutes), 'SaneDate set minutes | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(minutes, 'setUTCMinutes', 'getUTCMinutes', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(minutes, 'setMinutes', 'getMinutes', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMinutes() : _this_._date.getMinutes();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'seconds', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(seconds){\n\t\t\t\t\t\tseconds = parseInt(seconds, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(seconds), 'SaneDate set seconds | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(seconds, 'setUTCSeconds', 'getUTCSeconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(seconds, 'setSeconds', 'getSeconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCSeconds() : _this_._date.getSeconds();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// documented as property in signature above\n\t\t\t\tObject.defineProperty(this, 'milliseconds', $.extend({}, propertyConfig, {\n\t\t\t\t\tset : function(milliseconds){\n\t\t\t\t\t\tmilliseconds = parseInt(milliseconds, 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(milliseconds), 'SaneDate set milliseconds | value is not usable as int');\n\n\t\t\t\t\t\tif( _this_.utc ){\n\t\t\t\t\t\t\t_this_._tryDatePartChange(milliseconds, 'setUTCMilliseconds', 'getUTCMilliseconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_this_._tryDatePartChange(milliseconds, 'setMilliseconds', 'getMilliseconds', !_this_._ignoreInvalidPartChanged);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tget : function(){\n\t\t\t\t\t\tif( $.isSet(_this_._date) && _this_._valid ){\n\t\t\t\t\t\t\treturn _this_._utc ? _this_._date.getUTCMilliseconds() : _this_._date.getMilliseconds();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t},\n\t\t\t// ***\n\n\n\n\t\t\t/**\n\t\t\t * Define if the date should return UTC-info or local info.\n\t\t\t * The default are local values, set this to true to automatically retrieve UTC-values.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {Boolean} utc - define if date should behave as UTC date\n\t\t\t * @return {SaneDate} this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.setUtc(true);\n\t\t\t **/\n\t\t\tsetUtc : function(utc){\n\t\t\t\tthis._utc = !!utc;\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Define if the date should ignore changes to date parts and keep the old value or throw an exception.\n\t\t\t * Normally those changes result in an exception to be immediately notified of changes that make the date invalid.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {Boolean} ignoreInvalidPartChanged - define if date should ignore invalid changes to the date or throw exception\n\t\t\t * @return {SaneDate} this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.setIgnoreInvalidPartChanged(true);\n\t\t\t **/\n\t\t\tsetIgnoreInvalidPartChanged : function(ignoreInvalidPartChanged){\n\t\t\t\tthis._ignoreInvalidPartChanged = !!ignoreInvalidPartChanged;\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the current day of the week as a number between 1 and 7.\n\t\t\t * This method counts days the European way, starting with monday normally, but you can change this\n\t\t\t * behaviour using the first parameter.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {?Boolean} [startingWithMonday=true] - set false if you want sunday to be the first day of the week\n\t\t\t * @return {Number.Integer} weekday index between 1 and 7\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * if( d.getWeekDay() == 5 ){\n\t\t\t *   alert('Thank god it\\'s friday!');\n\t\t\t * }\n\t\t\t **/\n\t\t\tgetWeekDay : function(startingWithMonday){\n\t\t\t\tstartingWithMonday = $.orDefault(startingWithMonday, true, 'bool');\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar day = this._utc ? this._date.getUTCDay() : this._date.getDay();\n\n\t\t\t\t\tif( startingWithMonday && (day === 0) ){\n\t\t\t\t\t\tday = 7;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( !startingWithMonday ){\n\t\t\t\t\t\tday += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn day;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the date's current date related data as a date iso-string.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {String} date iso-string of the format '2016-04-07'\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * $thatDatePicker.setValue(d.getIsoDateString());\n\t\t\t **/\n\t\t\tgetIsoDateString : function(){\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar year = this._utc ? this._date.getUTCFullYear() : this._date.getFullYear(),\n\t\t\t\t\t\tmonth = this._utc ? this._date.getUTCMonth() + 1 : this._date.getMonth() + 1,\n\t\t\t\t\t\tdate = this._utc ? this._date.getUTCDate() : this._date.getDate();\n\n\t\t\t\t\tyear = ''+year;\n\t\t\t\t\tmonth = (month < 10) ? '0'+month : ''+month;\n\t\t\t\t\tdate = (date < 10) ? '0'+date : ''+date;\n\n\t\t\t\t\tif( year < 1000 ){\n\t\t\t\t\t\tyear = this._padValueWithZero(year, 4);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $.strFormat('{year}-{month}-{date}', {year : year, month : month, date : date});\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns the date as an iso-string.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {?Boolean} [withSeparator=true] - defines if date and time should be separated with a \"T\"\n\t\t\t * @return {String} iso-string of the format '2016-04-07T13:37:00.222'\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * $thatDateTimePicker.setValue(d.getIsoString());\n\t\t\t **/\n\t\t\tgetIsoString : function(withSeparator){\n\t\t\t\twithSeparator = $.orDefault(withSeparator, true, 'bool');\n\n\t\t\t\tvar dateString = this.getIsoDateString();\n\n\t\t\t\tif( $.isSet(dateString) ){\n\t\t\t\t\tvar hours = this._utc ? this._date.getUTCHours() : this._date.getHours(),\n\t\t\t\t\t\tminutes = this._utc ? this._date.getUTCMinutes() : this._date.getMinutes(),\n\t\t\t\t\t\tseconds = this._utc ? this._date.getUTCSeconds() : this._date.getSeconds(),\n\t\t\t\t\t\tmilliseconds = this._utc ? this._date.getUTCMilliseconds() : this._date.getMilliseconds();\n\n\t\t\t\t\t\thours = (hours < 10) ? '0'+hours : ''+hours;\n\t\t\t\t\t\tminutes = (minutes < 10) ? '0'+minutes : ''+minutes;\n\t\t\t\t\t\tseconds = (seconds < 10) ? '0'+seconds : ''+seconds;\n\t\t\t\t\t\tmilliseconds = ''+milliseconds;\n\n\t\t\t\t\t\treturn dateString+(withSeparator ? 'T' : ' ')+$.strFormat('{hours}:{minutes}:{seconds}.{milliseconds}', {\n\t\t\t\t\t\t\thours : hours,\n\t\t\t\t\t\t\tminutes : minutes,\n\t\t\t\t\t\t\tseconds : seconds,\n\t\t\t\t\t\t\tmilliseconds : milliseconds\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Return the current original JavaScript date object wrapped by the SameDate.\n\t\t\t * Use this to do special things.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {(null|Date)} the original JavaScript date object or null if the date is not valid\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * var timezoneOffset = d.getVanillaDate().getTimezoneOffset();\n\t\t\t **/\n\t\t\tgetVanillaDate : function(){\n\t\t\t\tif( this._valid ){\n\t\t\t\t\treturn this._date;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Compares the date to another SaneDate or an iso string.\n\t\t\t * Returns a classical comparator value (-1/0/1), being -1 if the date is smaller than the parameter.\n\t\t\t * Normally checks date and time. Set type to \"date\" to only check date.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Date)} isoStringOrSaneDate - either an iso string or another SaneDate to compare to\n\t\t\t * @param {?String} [type='datetime'] - either 'datetime' or 'date', telling the method if time should be considered\n\t\t\t * @param {?Boolean} [withMilliseconds=true] - tells the method if milliseconds should be considered if type is 'datetime'\n\t\t\t * @return {Number.Integer} -1 if this is smaller/earlier, 0 if identical, 1 if parameter if bigger/later\n\t\t\t * @throws on unusable base or compare date\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * if( d.compareTo('2016-04-07', 'date') === 0 ){\n\t\t\t *   alert('congratulations, that\\'s the same date!');\n\t\t\t * }\n\t\t\t **/\n\t\t\tcompareTo : function(isoStringOrSaneDate, type, withMilliseconds){\n\t\t\t\ttype = $.orDefault(type, 'datetime', 'string');\n\t\t\t\twithMilliseconds = $.orDefault(withMilliseconds, true, 'bool');\n\n\t\t\t\tvar _this_ = this;\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar saneDate = null;\n\t\t\t\t\tif( $.isA(isoStringOrSaneDate, 'object') && $.hasMembers(isoStringOrSaneDate, ['_date', '_valid']) ){\n\t\t\t\t\t\tsaneDate = isoStringOrSaneDate;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsaneDate = new $.SaneDate(''+isoStringOrSaneDate);\n\t\t\t\t\t}\n\n\t\t\t\t\tif( saneDate._valid ){\n\t\t\t\t\t\tvar comparator = 0,\n\t\t\t\t\t\t\tdateCompareGetters = ['getFullYear', 'getMonth', 'getDate'],\n\t\t\t\t\t\t\ttimeCompareGetters = ['getHours', 'getMinutes', 'getSeconds'],\n\t\t\t\t\t\t\tmillisecondsCompareGetters = ['getMilliseconds'],\n\t\t\t\t\t\t\tcompareGetters = [];\n\n\t\t\t\t\t\t$.merge(compareGetters, dateCompareGetters);\n\t\t\t\t\t\tif( type === 'datetime' ){\n\t\t\t\t\t\t\t$.merge(compareGetters, timeCompareGetters);\n\n\t\t\t\t\t\t\tif( withMilliseconds ){\n\t\t\t\t\t\t\t\t$.merge(compareGetters, millisecondsCompareGetters);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar ownValue, compareValue;\n\t\t\t\t\t\t$.each(compareGetters, function(index, compareGetter){\n\t\t\t\t\t\t\townValue = _this_._date[compareGetter]();\n\t\t\t\t\t\t\tcompareValue = saneDate._date[compareGetter]();\n\t\t\t\t\t\t\tcomparator =\n\t\t\t\t\t\t\t\t(compareValue > ownValue)\n\t\t\t\t\t\t\t\t? -1\n\t\t\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t\t\t(ownValue > compareValue)\n\t\t\t\t\t\t\t\t\t? 1\n\t\t\t\t\t\t\t\t\t: 0\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t;\n\n\t\t\t\t\t\t\tif( comparator !== 0 ){\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn comparator;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('SaneDate compareTo | invalid compare date');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('SaneDate compareTo | date currently not comparable');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : -1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - negative or positive integer defining the offset from the current date\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.move('years', 10).move('milliseconds', -1);\n\t\t\t **/\n\t\t\tmove : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tparts = ['years', 'months', 'days', 'hours', 'minutes', 'seconds', 'milliseconds'];\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar partDict = {};\n\t\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\t\tpartDict[''+part] = amount;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpartDict = part;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tif( $.inArray(''+part, parts) >= 0 ){\n\t\t\t\t\t\t\tswitch( ''+part ){\n\t\t\t\t\t\t\t\tcase 'years':\n\t\t\t\t\t\t\t\t\t_this_._date.setFullYear(_this_._date.getFullYear() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'months':\n\t\t\t\t\t\t\t\t\t_this_._date.setMonth(_this_._date.getMonth() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'days':\n\t\t\t\t\t\t\t\t\t_this_._date.setDate(_this_._date.getDate() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'hours':\n\t\t\t\t\t\t\t\t\t_this_._date.setHours(_this_._date.getHours() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'minutes':\n\t\t\t\t\t\t\t\t\t_this_._date.setMinutes(_this_._date.getMinutes() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'seconds':\n\t\t\t\t\t\t\t\t\t_this_._date.setSeconds(_this_._date.getSeconds() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'milliseconds':\n\t\t\t\t\t\t\t\t\t_this_._date.setMilliseconds(_this_._date.getMilliseconds() + amount);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('SaneDate _move | part must be one of years, months, days, hours, minutes, seconds, milliseconds');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('SaneDate _move | current date is not usable');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time forward a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : 1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - integer defining the positve offset from the current date, '-' is dropped if present\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.forward('hours', 8);\n\t\t\t **/\n\t\t\tforward : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar partDict = {};\n\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\tpartDict[''+part] = Math.abs(amount);\n\t\t\t\t} else {\n\t\t\t\t\tpartDict = part;\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tpartDict[part] = Math.abs(amount);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.move(partDict);\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Moves the date's time back a certain offset.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|Object)} part - the name of the date part to change, one of 'years', 'months', 'days', 'hours', 'minutes', 'seconds'and 'milliseconds' or a dictionary of part/amount pairs ({hours : 1, seconds : 30})\n\t\t\t * @param {?Number.Integer} [amount=0] - integer defining the negative offset from the current date, '-' is dropped if present\n\t\t\t * @return {SaneDate} this\n\t\t\t * @throws on unusable base date or invalid part name\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * d.back('years', 1000);\n\t\t\t **/\n\t\t\tback : function(part, amount){\n\t\t\t\tamount = $.orDefault(amount, 0, 'int');\n\n\t\t\t\tvar partDict = {};\n\t\t\t\tif( !$.isPlainObject(part) ){\n\t\t\t\t\tpartDict[''+part] = ((amount === 0) ? 0 : -Math.abs(amount));\n\t\t\t\t} else {\n\t\t\t\t\tpartDict = part;\n\t\t\t\t\t$.each(partDict, function(part, amount){\n\t\t\t\t\t\tpartDict[part] = ((amount === 0) ? 0 : -Math.abs(amount));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn this.move(partDict);\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Calculates a timedata between two SaneDates.\n\t\t\t *\n\t\t\t * The result is a plain object with the delta's units up to the defined \"largestUnit\". All values are ints.\n\t\t\t * The largest unit are days, since above neither months nor years are calculable via a fixed divisor and therefore\n\t\t\t * useless.\n\t\t\t *\n\t\t\t * By default the order does not matter and only the absolute value is used, but you can change this\n\t\t\t * through the parameter \"absolute\".\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @param {(String|SaneDate)} isoStringOrSaneDate - the date to calculate the delta against as an iso-string or a SaneDate\n\t\t\t * @param {?String} [largestUnit='days'] - the largestUnit to differentiate in the result\n\t\t\t * @param {?Boolean} [absolute=true] - if set false, returns negative values if first parameter is later than this date\n\t\t\t * @return {Object} timedelta in the format {days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5}\n\t\t\t * @throws on unknown largestUnit\n\t\t\t * @example\n\t\t\t * var now = new $.SaneDate();\n\t\t\t * var theFuture = now.clone().forward({days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5});\n\t\t\t * now.delta(theFuture)\n\t\t\t * => {days : 1, hours : 2, minutes : 3, seconds : 4, milliseconds : 5}\n\t\t\t * now.delta(theFuture, 'hours', false)\n\t\t\t * => {hours : -26, minutes : -3, seconds : -4, milliseconds : -5}\n\t\t\t **/\n\t\t\tdelta : function(isoStringOrSaneDate, largestUnit, absolute){\n\t\t\t\tlargestUnit = $.orDefault(largestUnit, 'days', 'string');\n\t\t\t\tif( $.inArray(largestUnit, ['days', 'hours', 'minutes', 'seconds', 'milliseconds']) < 0 ){\n\t\t\t\t\tthrow new Error('SaneDate delta | largestUnit must be one of \"days\", \"hours\", \"minutes\", \"seconds\" or \"milliseconds\"');\n\t\t\t\t}\n\t\t\t\tabsolute = $.orDefault(absolute, true, 'bool');\n\n\t\t\t\tif( $.isSet(this._date) && this._valid ){\n\t\t\t\t\tvar saneDate = null,\n\t\t\t\t\t\tdelta = null,\n\t\t\t\t\t\tparts = {};\n\n\t\t\t\t\tif( $.isA(isoStringOrSaneDate, 'object') && $.hasMembers(isoStringOrSaneDate, ['_date', '_valid']) ){\n\t\t\t\t\t\tsaneDate = isoStringOrSaneDate;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsaneDate = new $.SaneDate(''+isoStringOrSaneDate);\n\t\t\t\t\t}\n\n\t\t\t\t\tdelta =\n\t\t\t\t\t\tabsolute\n\t\t\t\t\t\t? Math.abs(this._date.getTime() - saneDate._date.getTime())\n\t\t\t\t\t\t: (this._date.getTime() - saneDate._date.getTime())\n\t\t\t\t\t;\n\n\t\t\t\t\tvar negativeDelta = delta < 0;\n\t\t\t\t\tdelta = Math.abs(delta);\n\n\t\t\t\t\tif( largestUnit === 'days' ){\n\t\t\t\t\t\tparts.days = Math.floor(delta / 1000 / 60 / 60 / 24);\n\t\t\t\t\t\tdelta -= parts.days * 1000 * 60 * 60 * 24;\n\t\t\t\t\t\tlargestUnit = 'hours';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'hours' ){\n\t\t\t\t\t\tparts.hours = Math.floor(delta / 1000 / 60 / 60);\n\t\t\t\t\t\tdelta -= parts.hours * 1000 * 60 * 60;\n\t\t\t\t\t\tlargestUnit = 'minutes';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'minutes' ){\n\t\t\t\t\t\tparts.minutes = Math.floor(delta / 1000 / 60);\n\t\t\t\t\t\tdelta -= parts.minutes * 1000 * 60;\n\t\t\t\t\t\tlargestUnit = 'seconds';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'seconds' ){\n\t\t\t\t\t\tparts.seconds = Math.floor(delta / 1000);\n\t\t\t\t\t\tdelta -= parts.seconds * 1000;\n\t\t\t\t\t\tlargestUnit = 'milliseconds';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( largestUnit === 'milliseconds' ){\n\t\t\t\t\t\tparts.milliseconds = delta;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( negativeDelta ){\n\t\t\t\t\t\t$.each(parts, function(partName, partValue){\n\t\t\t\t\t\t\tparts[partName] = (partValue === 0) ? 0 : -partValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn parts;\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * Returns a copy of the current SaneDate.\n\t\t\t * Might be very handy for creating dates based on another with an offset for example.\n\t\t\t * Keeps UTC mode.\n\t\t\t *\n\t\t\t * @method\n\t\t\t * @return {SaneDate} copy of this\n\t\t\t * @example\n\t\t\t * var d = new $.SaneDate();\n\t\t\t * var theFuture = d.clone().forward('hours', 8);\n\t\t\t **/\n\t\t\tclone : function(){\n\t\t\t\tvar clonedSaneDate = new $.SaneDate(new Date(this.getVanillaDate().getTime()));\n\t\t\t\tclonedSaneDate.setUtc(this._utc);\n\n\t\t\t\treturn clonedSaneDate;\n\t\t\t},\n\n\n\n\t\t\t_setInvalid : function(){\n\t\t\t\tthis._date = null;\n\t\t\t\tthis._valid = false;\n\t\t\t},\n\n\n\n\t\t\t_padValueWithZero : function(value, digitCount){\n\t\t\t\tdigitCount = $.orDefault(digitCount, 2, 'int');\n\t\t\t\tvalue = parseInt(value, 10);\n\t\t\t\t$.assert(!$.isNaN(value), 'SaneDate _padValueWithZero | value is not usable as int');\n\t\t\t\tvalue = ''+value;\n\n\t\t\t\tvar valueLength = value.length;\n\t\t\t\tif( valueLength < digitCount ){\n\t\t\t\t\tfor( var i = 0; i < (digitCount - valueLength); i++ ){\n\t\t\t\t\t\tvalue = '0'+value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t},\n\n\n\n\t\t\t_partsToDate : function(parts, localTime){\n\t\t\t\tlocalTime = $.orDefault(localTime, false, 'bool');\n\n\t\t\t\tvar dateParts = $.extend({}, parts);\n\t\t\t\tdateParts.year = this._padValueWithZero(dateParts.year, 4);\n\t\t\t\tdateParts.month = this._padValueWithZero(dateParts.month);\n\t\t\t\tdateParts.date = this._padValueWithZero(dateParts.date);\n\n\t\t\t\tif( dateParts.type === 'date' ){\n\t\t\t\t\treturn new Date($.strFormat('{year}-{month}-{date}T00:00:00.0', dateParts));\n\t\t\t\t} else if( dateParts.type === 'datetime' ){\n\t\t\t\t\tdateParts.hours = this._padValueWithZero(dateParts.hours);\n\t\t\t\t\tdateParts.minutes = this._padValueWithZero(dateParts.minutes);\n\t\t\t\t\tdateParts.seconds = this._padValueWithZero(dateParts.seconds);\n\n\t\t\t\t\tif( $.isSet(dateParts.milliseconds) ){\n\t\t\t\t\t\tdateParts.seconds += '.'+dateParts.milliseconds;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateWithoutOffset = new Date($.strFormat('{year}-{month}-{date}T{hours}:{minutes}:{seconds}', dateParts));\n\n\t\t\t\t\tif( !localTime ){\n\t\t\t\t\t\treturn dateWithoutOffset;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn new Date(dateWithoutOffset.getTime() - (dateWithoutOffset.getTimezoneOffset() * 60000));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('_partsToDate | unknown type');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_verifyDateParts : function(parts){\n\t\t\t\tvar date = this._partsToDate(parts);\n\t\t\t\tif( parts.type === 'date' ){\n\t\t\t\t\treturn (parseInt(parts.year, 10) === (this._utc ? date.getUTCFullYear() : date.getFullYear()))\n\t\t\t\t\t\t&& (parseInt(parts.month, 10) === (this._utc ? date.getUTCMonth() + 1 : date.getMonth() + 1))\n\t\t\t\t\t\t&& (parseInt(parts.date, 10) === (this._utc ? date.getUTCDate() : date.getDate()));\n\t\t\t\t} else if( parts.type === 'datetime' ){\n\t\t\t\t\treturn (parseInt(parts.year, 10) === (this._utc ? date.getUTCFullYear() : date.getFullYear()))\n\t\t\t\t\t\t&& (parseInt(parts.month, 10) === (this._utc ? date.getUTCMonth() + 1 : date.getMonth() + 1))\n\t\t\t\t\t\t&& (parseInt(parts.date, 10) === (this._utc ? date.getUTCDate() : date.getDate()))\n\t\t\t\t\t\t&& (parseInt(parts.hours, 10) === (this._utc ? date.getUTCHours() : date.getHours()))\n\t\t\t\t\t\t&& (parseInt(parts.minutes, 10) === (this._utc ? date.getUTCMinutes() : date.getMinutes()))\n\t\t\t\t\t\t&& (parseInt(parts.seconds, 10) === (this._utc ? date.getUTCSeconds() : date.getSeconds()))\n\t\t\t\t\t\t&& ($.isSet(parts.milliseconds) ? (parseInt(parts.milliseconds, 10) === (this._utc ? date.getUTCMilliseconds() : date.getMilliseconds())) : true);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('_verifyDateParts | unknown type');\n\t\t\t\t}\n\t\t\t},\n\n\n\n\t\t\t_parseIsoString : function(isoString){\n\t\t\t\tisoString = ''+isoString;\n\n\t\t\t\tvar parts = {\n\t\t\t\t\ttype : 'date',\n\t\t\t\t\tyear : null,\n\t\t\t\t\tmonth : null,\n\t\t\t\t\tdate : null,\n\t\t\t\t\thours : null,\n\t\t\t\t\tminutes : null,\n\t\t\t\t\tseconds : null,\n\t\t\t\t\tmilliseconds : null\n\t\t\t\t};\n\n\t\t\t\tvar isoStringParts = isoString.split('T');\n\n\t\t\t\tif( isoStringParts.length === 1 ){\n\t\t\t\t\tisoStringParts = isoStringParts[0].split(' ');\n\t\t\t\t}\n\n\t\t\t\tif( isoStringParts.length >= 2 ){\n\t\t\t\t\tvar isoStringTimeParts = isoStringParts[1].split(':');\n\n\t\t\t\t\tif( isoStringTimeParts.length >= 3 ){\n\t\t\t\t\t\tvar hours = parseInt(isoStringTimeParts[0], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(hours), 'SaneDate _parseIsoString | hours not usable as int');\n\t\t\t\t\t\tparts.hours = this._padValueWithZero(hours);\n\n\t\t\t\t\t\tvar minutes = parseInt(isoStringTimeParts[1], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(minutes), 'SaneDate _parseIsoString | minutes not usable as int');\n\t\t\t\t\t\tparts.minutes = this._padValueWithZero(minutes);\n\n\t\t\t\t\t\tvar isoStringSecondsParts = isoStringTimeParts[2];\n\t\t\t\t\t\tisoStringSecondsParts = $.strReplace('Z', '', isoStringSecondsParts);\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('+')[0];\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('-')[0];\n\t\t\t\t\t\tisoStringSecondsParts = isoStringSecondsParts.split('.');\n\n\t\t\t\t\t\tif( isoStringSecondsParts.length >= 2 ){\n\t\t\t\t\t\t\tvar milliseconds = parseInt(isoStringSecondsParts[1], 10);\n\t\t\t\t\t\t\t$.assert(!$.isNaN(milliseconds), 'SaneDate _parseIsoString | milliseconds not usable as int');\n\t\t\t\t\t\t\tparts.milliseconds = ''+milliseconds;\n\n\t\t\t\t\t\t\tif( parts.milliseconds.length > 3 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = parts.milliseconds.substr(0, 3);\n\t\t\t\t\t\t\t} else if( parts.milliseconds.length === 2 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = ''+(milliseconds * 10);\n\t\t\t\t\t\t\t} else if( parts.milliseconds.length === 1 ){\n\t\t\t\t\t\t\t\tparts.milliseconds = ''+(milliseconds * 100);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar seconds = parseInt(isoStringSecondsParts[0], 10);\n\t\t\t\t\t\t$.assert(!$.isNaN(seconds), 'SaneDate _parseIsoString | seconds not usable as int');\n\t\t\t\t\t\tparts.seconds = this._padValueWithZero(seconds);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tparts.type = 'datetime';\n\t\t\t\t}\n\n\t\t\t\tvar isoStringDateParts = isoStringParts[0].split('-');\n\t\t\t\tif( isoStringDateParts.length >= 3 ){\n\t\t\t\t\tvar year = parseInt(isoStringDateParts[0], 10);\n\t\t\t\t\t$.assert(!$.isNaN(year), 'SaneDate _parseIsoString | year not usable as int');\n\t\t\t\t\t$.assert((year >= 0 && year <= 9999), 'SaneDate _parseIsoString | this implementation works with years between 0 and 9999');\n\t\t\t\t\tparts.year = this._padValueWithZero(year, 4);\n\n\t\t\t\t\tvar month = parseInt(isoStringDateParts[1], 10);\n\t\t\t\t\t$.assert(!$.isNaN(month), 'SaneDate _parseIsoString | month not usable as int');\n\t\t\t\t\tparts.month = this._padValueWithZero(month);\n\n\t\t\t\t\tvar date = parseInt(isoStringDateParts[2], 10);\n\t\t\t\t\t$.assert(!$.isNaN(date), 'SaneDate _parseIsoString | date not usable as int');\n\t\t\t\t\tparts.date = this._padValueWithZero(date);\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn this._verifyDateParts(parts) ? parts : null;\n\t\t\t},\n\n\n\n\t\t\t_tryDatePartChange : function(value, setter, getter, throwExceptionOnFail){\n\t\t\t\tthrowExceptionOnFail = $.orDefault(throwExceptionOnFail, false, 'bool');\n\n\t\t\t\tvar _this_ = this,\n\t\t\t\t\tallDatePartGetters = [\n\t\t\t\t\t'getFullYear',\n\t\t\t\t\t'getMonth',\n\t\t\t\t\t'getDate',\n\t\t\t\t\t'getHours',\n\t\t\t\t\t'getMinutes',\n\t\t\t\t\t'getSeconds',\n\t\t\t\t\t'getMilliseconds'\n\t\t\t\t],\n\t\t\t\tallDatePartGettersUTC = [\n\t\t\t\t\t'getUTCFullYear',\n\t\t\t\t\t'getUTCMonth',\n\t\t\t\t\t'getUTCDate',\n\t\t\t\t\t'getUTCHours',\n\t\t\t\t\t'getUTCMinutes',\n\t\t\t\t\t'getUTCSeconds',\n\t\t\t\t\t'getUTCMilliseconds'\n\t\t\t\t];\n\n\t\t\t\tif( $.isSet(this._date) ){\n\t\t\t\t\tthis._compareDate = new Date(this._date.getTime());\n\t\t\t\t\tthis._date[setter](value);\n\n\t\t\t\t\tvar changed = false;\n\t\t\t\t\t$.each(this._utc ? allDatePartGettersUTC : allDatePartGetters, function(index, datePartGetter){\n\t\t\t\t\t\tif( datePartGetter !== getter ){\n\t\t\t\t\t\t\tchanged = changed || (_this_._date[datePartGetter]() !== _this_._compareDate[datePartGetter]());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( changed ){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif( changed ){\n\t\t\t\t\t\tthis._date = this._compareDate;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._compareDate = null;\n\n\t\t\t\t\tif( !throwExceptionOnFail ){\n\t\t\t\t\t\treturn changed;\n\t\t\t\t\t} else if( changed ){\n\t\t\t\t\t\tthrow new Error('SaneDate _tryDatePartChange | date part change is invalid or would change other parts');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif( !throwExceptionOnFail ){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('SaneDate _tryDatePartChange | no date to change the part of');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t);\n\n\treturn $;\n\n}));\n"]}